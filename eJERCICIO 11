#include <iostream>
#include <vector>
#include <algorithm>

int maxSubarraySum(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    int maxSoFar = nums[0];
    int currentMax = nums[0];

    for (size_t i = 1; i < nums.size(); ++i) {
        currentMax = std::max(nums[i], currentMax + nums[i]);
        maxSoFar = std::max(maxSoFar, currentMax);
    }

    return maxSoFar;
}

int main() {
    std::vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};

    int maxSum = maxSubarraySum(nums);

    std::cout << "La suma máxima de un subarreglo contiguo es: " << maxSum << std::endl;

    return 0;
}
#include <iostream>
#include <vector>
#include <algorithm>

int maxSubarraySum(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    int maxSoFar = nums[0];
    int currentMax = nums[0];

    for (size_t i = 1; i < nums.size(); ++i) {
        currentMax = std::max(nums[i], currentMax + nums[i]);
        maxSoFar = std::max(maxSoFar, currentMax);
    }

    return maxSoFar;
}

int main() {
    std::vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};

    int maxSum = maxSubarraySum(nums);

    std::cout << "La suma máxima de un subarreglo contiguo es: " << maxSum << std::endl;

    return 0;
}
#include <iostream>
#include <vector>
#include <algorithm>

int maxSubarraySum(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    int maxSoFar = nums[0];
    int currentMax = nums[0];

    for (size_t i = 1; i < nums.size(); ++i) {
        currentMax = std::max(nums[i], currentMax + nums[i]);
        maxSoFar = std::max(maxSoFar, currentMax);
    }

    return maxSoFar;
}

int main() {
    std::vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};

    int maxSum = maxSubarraySum(nums);

    std::cout << "La suma máxima de un subarreglo contiguo es: " << maxSum << std::endl;

    return 0;
}

